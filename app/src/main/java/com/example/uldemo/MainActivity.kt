package com.example.uldemo

import android.annotation.SuppressLint
import android.content.Context
import android.content.SharedPreferences
import android.os.Build
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.uldemo.ui.theme.UldemoTheme
import androidx.annotation.RequiresApi
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.grid.GridCells
import androidx.compose.foundation.lazy.grid.LazyVerticalGrid
import androidx.compose.foundation.lazy.grid.items
import androidx.compose.foundation.pager.HorizontalPager
import androidx.compose.foundation.pager.rememberPagerState
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.runtime.*
import androidx.compose.ui.text.style.TextAlign
import java.time.DayOfWeek
import java.time.LocalDate
import java.time.YearMonth
import java.time.format.DateTimeFormatter
import java.time.format.TextStyle
import java.util.Locale
import androidx.compose.foundation.ExperimentalFoundationApi
import androidx.compose.animation.core.animateFloatAsState
import androidx.compose.foundation.interaction.MutableInteractionSource
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.ui.draw.shadow
import androidx.compose.ui.text.style.TextDecoration
import androidx.compose.runtime.mutableStateMapOf
import androidx.compose.runtime.snapshots.SnapshotStateList
import androidx.compose.runtime.mutableStateListOf
import com.example.uldemo.ui.theme.CustomFontFamily
import androidx.compose.ui.platform.LocalContext
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import org.json.JSONObject
import org.json.JSONArray
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.MoreVert
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material.icons.filled.Add
import androidx.compose.material.icons.filled.Delete
import androidx.compose.material.icons.filled.Edit
import androidx.compose.material3.IconButton
import androidx.compose.material3.DropdownMenu
import androidx.compose.material3.DropdownMenuItem
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Button
import androidx.compose.material3.AlertDialog
import androidx.compose.material3.TextButton
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.material3.FloatingActionButton
import android.content.Intent
import android.net.Uri
import androidx.compose.ui.platform.LocalUriHandler

// ÂØºËà™Áä∂ÊÄÅÊûö‰∏æ
enum class Screen {
    MAIN, EDIT_HABITS, ABOUT
}

data class DailyHabit(
    val id: Int,
    val title: String,
    val description: String = "",
    val icon: String = "‚úì"
)

// ‰π†ÊÉØÁÆ°ÁêÜÂô® - ÁÆ°ÁêÜ‰π†ÊÉØÁöÑÂ¢ûÂà†Êîπ
object HabitManager {
    private val _habits = mutableStateListOf<DailyHabit>()
    val habits: List<DailyHabit> get() = _habits.toList()
    
    private lateinit var sharedPreferences: SharedPreferences
    private const val PREF_NAME = "habit_tracker_prefs"
    private const val KEY_HABITS_DATA = "habits_data"
    private var nextId = 1
    
    fun init(context: Context) {
        sharedPreferences = context.getSharedPreferences(PREF_NAME, Context.MODE_PRIVATE)
        loadHabits()
    }
    
    private fun loadHabits() {
        try {
            val jsonString = sharedPreferences.getString(KEY_HABITS_DATA, null)
            if (jsonString != null) {
                val jsonArray = JSONArray(jsonString)
                _habits.clear()
                for (i in 0 until jsonArray.length()) {
                    val habitJson = jsonArray.getJSONObject(i)
                    val habit = DailyHabit(
                        id = habitJson.getInt("id"),
                        title = habitJson.getString("title"),
                        description = habitJson.optString("description", ""),
                        icon = habitJson.optString("icon", "‚úì")
                    )
                    _habits.add(habit)
                    nextId = maxOf(nextId, habit.id + 1)
                }
            } else {
                // ÈªòËÆ§‰π†ÊÉØ
                _habits.addAll(getDefaultHabits())
                saveHabits()
            }
        } catch (e: Exception) {
            e.printStackTrace()
            _habits.clear()
            _habits.addAll(getDefaultHabits())
        }
    }
    
    private fun getDefaultHabits(): List<DailyHabit> {
        return listOf(
            DailyHabit(1, "ÂñùÊ∞¥", "ÊØèÂ§©8ÊùØÊ∞¥", "üíß"),
            DailyHabit(2, "ËøêÂä®", "30ÂàÜÈíüËøêÂä®", "üèÉ"),
            DailyHabit(3, "ÂÜ•ÊÉ≥", "10ÂàÜÈíüÂÜ•ÊÉ≥", "üßò"),
            DailyHabit(4, "ÈòÖËØª", "ËØª‰π¶30ÂàÜÈíü", "üìñ"),
            DailyHabit(5, "Êó©Áù°", "Êôö‰∏ä11ÁÇπÂâçÁù°Ëßâ", "üò¥")
        )
    }
    
    private fun saveHabits() {
        try {
            val jsonArray = JSONArray()
            _habits.forEach { habit ->
                val habitJson = JSONObject().apply {
                    put("id", habit.id)
                    put("title", habit.title)
                    put("description", habit.description)
                    put("icon", habit.icon)
                }
                jsonArray.put(habitJson)
            }
            sharedPreferences.edit()
                .putString(KEY_HABITS_DATA, jsonArray.toString())
                .apply()
        } catch (e: Exception) {
            e.printStackTrace()
        }
    }
    
    fun addHabit(title: String, description: String, icon: String) {
        val newHabit = DailyHabit(nextId++, title, description, icon)
        _habits.add(newHabit)
        saveHabits()
    }
    
    fun updateHabit(id: Int, title: String, description: String, icon: String) {
        val index = _habits.indexOfFirst { it.id == id }
        if (index != -1) {
            _habits[index] = _habits[index].copy(
                title = title,
                description = description,
                icon = icon
            )
            saveHabits()
        }
    }
    
    fun deleteHabit(id: Int) {
        _habits.removeAll { it.id == id }
        saveHabits()
    }
}

// ÂÖ®Â±ÄÊâìÂç°Áä∂ÊÄÅÁÆ°ÁêÜ
object CheckInManager {
    private val checkedDates = mutableStateMapOf<LocalDate, Set<Int>>()
    private lateinit var sharedPreferences: SharedPreferences
    private const val PREF_NAME = "habit_tracker_prefs"
    private const val KEY_CHECK_DATA = "check_data"
    
    // ÂàùÂßãÂåñ
    @RequiresApi(Build.VERSION_CODES.O)
    fun init(context: Context) {
        sharedPreferences = context.getSharedPreferences(PREF_NAME, Context.MODE_PRIVATE)
        loadData()
    }
    
    // Âä†ËΩΩ‰øùÂ≠òÁöÑÊï∞ÊçÆ
    @RequiresApi(Build.VERSION_CODES.O)
    private fun loadData() {
        try {
            val jsonString = sharedPreferences.getString(KEY_CHECK_DATA, null) ?: return
            val jsonObject = JSONObject(jsonString)
            
            jsonObject.keys().forEach { dateString ->
                val date = LocalDate.parse(dateString)
                val habitIdsArray = jsonObject.getJSONArray(dateString)
                val habitIds = mutableSetOf<Int>()
                
                for (i in 0 until habitIdsArray.length()) {
                    habitIds.add(habitIdsArray.getInt(i))
                }
                
                if (habitIds.isNotEmpty()) {
                    checkedDates[date] = habitIds
                }
            }
        } catch (e: Exception) {
            e.printStackTrace()
        }
    }
    
    // ‰øùÂ≠òÊï∞ÊçÆ
    @RequiresApi(Build.VERSION_CODES.O)
    private fun saveData() {
        try {
            val jsonObject = JSONObject()
            
            checkedDates.forEach { (date, habitIds) ->
                val jsonArray = JSONArray()
                habitIds.forEach { id ->
                    jsonArray.put(id)
                }
                jsonObject.put(date.toString(), jsonArray)
            }
            
            sharedPreferences.edit()
                .putString(KEY_CHECK_DATA, jsonObject.toString())
                .apply()
        } catch (e: Exception) {
            e.printStackTrace()
        }
    }
    
    // Ê£ÄÊü•Êüê‰∏™Êó•ÊúüÊòØÂê¶Êúâ‰ªª‰ΩïÊâìÂç°
    fun isDateChecked(date: LocalDate): Boolean {
        return checkedDates[date]?.isNotEmpty() == true
    }
    
    // Ê£ÄÊü•Êüê‰∏™‰π†ÊÉØÂú®ÊüêÂ§©ÊòØÂê¶ÂÆåÊàê
    @RequiresApi(Build.VERSION_CODES.O)
    fun isHabitChecked(date: LocalDate, habitId: Int): Boolean {
        return checkedDates[date]?.contains(habitId) == true
    }

    @RequiresApi(Build.VERSION_CODES.O)
    fun toggleHabitCheck(date: LocalDate, habitId: Int) {
        val currentSet = checkedDates[date] ?: emptySet()
        if (currentSet.contains(habitId)) {
            // ÂèñÊ∂àÊâìÂç°
            val newSet = currentSet - habitId
            if (newSet.isEmpty()) {
                checkedDates.remove(date)
            } else {
                checkedDates[date] = newSet
            }
        } else {
            // Ê∑ªÂä†ÊâìÂç°
            checkedDates[date] = currentSet + habitId
        }
        // ‰øùÂ≠òÊï∞ÊçÆ
        saveData()
    }
    
    // Ëé∑ÂèñÊüêÂ§©ÂÆåÊàêÁöÑ‰π†ÊÉØÊï∞Èáè
    @RequiresApi(Build.VERSION_CODES.O)
    fun getCompletedCount(date: LocalDate): Int {
        return checkedDates[date]?.size ?: 0
    }
}

class MainActivity : ComponentActivity() {
    @RequiresApi(Build.VERSION_CODES.O)
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        
        // ÂàùÂßãÂåñÁÆ°ÁêÜÂô®
        CheckInManager.init(this)
        HabitManager.init(this)
        
        enableEdgeToEdge()
        setContent {
            UldemoTheme {
                AppNavigation()
            }
        }
    }
}

@RequiresApi(Build.VERSION_CODES.O)
@Composable
fun AppNavigation() {
    var currentScreen by remember { mutableStateOf(Screen.MAIN) }
    
    when (currentScreen) {
        Screen.MAIN -> MainScreen(
            onNavigateToEditHabits = { currentScreen = Screen.EDIT_HABITS },
            onNavigateToAbout = { currentScreen = Screen.ABOUT }
        )
        Screen.EDIT_HABITS -> EditHabitsScreen(
            onNavigateBack = { currentScreen = Screen.MAIN }
        )
        Screen.ABOUT -> AboutScreen(
            onNavigateBack = { currentScreen = Screen.MAIN }
        )
    }
}

@RequiresApi(Build.VERSION_CODES.O)
@Composable
fun MainScreen(
    onNavigateToEditHabits: () -> Unit,
    onNavigateToAbout: () -> Unit
) {
    var selectedDate by remember { mutableStateOf(LocalDate.now()) }
    var showMenu by remember { mutableStateOf(false) }
    
    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(
                Brush.verticalGradient(
                    colors = listOf(
                        Color(0xFFF9F9FB),
                        Color.White
                    )
                )
            )
    ) {
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(horizontal = 16.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Spacer(modifier = Modifier.statusBarsPadding())
            Spacer(modifier = Modifier.height(20.dp))
            
            // È°∂ÈÉ®Ê†èÔºåÂåÖÂê´Ê†áÈ¢òÂíåËèúÂçïÊåâÈíÆ
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Text(
                    text = "ÊâìÂç°ËÆ∞ÂΩï",
                    style = MaterialTheme.typography.headlineLarge.copy(
                        fontWeight = FontWeight.Bold,
                        fontSize = 34.sp,
                        color = Color.Black
                    )
                )
                
                Box {
                    IconButton(onClick = { showMenu = true }) {
                        Icon(
                            imageVector = Icons.Default.MoreVert,
                            contentDescription = "ËèúÂçï",
                            tint = Color.Black
                        )
                    }
                    
                    DropdownMenu(
                        expanded = showMenu,
                        onDismissRequest = { showMenu = false }
                    ) {
                        DropdownMenuItem(
                            text = { Text("ÁºñËæë‰π†ÊÉØ") },
                            onClick = {
                                showMenu = false
                                onNavigateToEditHabits()
                            }
                        )
                        DropdownMenuItem(
                            text = { Text("ÂÖ≥‰∫é") },
                            onClick = {
                                showMenu = false
                                onNavigateToAbout()
                            }
                        )
                    }
                }
            }

            Spacer(modifier = Modifier.height(24.dp))
            Box(
                modifier = Modifier
                    .fillMaxWidth()
                    .shadow(
                        elevation = 16.dp,
                        shape = RoundedCornerShape(22.dp),
                        ambientColor = Color.Black.copy(alpha = 0.08f),
                        spotColor = Color.Black.copy(alpha = 0.2f)
                    )
                    .clip(RoundedCornerShape(22.dp))
                    .background(Color.White)
                    .padding(vertical = 16.dp, horizontal = 8.dp)
            ) {
                PhysicsBasedCalendar(
                    selectedDate = selectedDate,
                    onDateSelected = { newDate -> selectedDate = newDate }
                )
            }

            Spacer(modifier = Modifier.height(28.dp))

            Column(
                modifier = Modifier
                    .fillMaxWidth()
                    .weight(1f)
                    .shadow(
                        elevation = 16.dp,
                        shape = RoundedCornerShape(22.dp),
                        ambientColor = Color.Black.copy(alpha = 0.08f),
                        spotColor = Color.Black.copy(alpha = 0.2f)
                    )
                    .clip(RoundedCornerShape(22.dp))
                    .background(Color.White)
                    .padding(16.dp)
            ) {
                Text(
                    text = "ÊØèÊó•ÊâìÂç°",
                    style = MaterialTheme.typography.titleLarge.copy(
                        fontWeight = FontWeight.SemiBold,
                        color = Color.Black.copy(alpha = 0.9f)
                    )
                )
                Spacer(modifier = Modifier.height(12.dp))

                HabitManagerComponent(selectedDate = selectedDate)
            }

            Spacer(modifier = Modifier.navigationBarsPadding())
            Spacer(modifier = Modifier.height(10.dp))
        }
    }
}

@RequiresApi(Build.VERSION_CODES.O)
@Composable
fun EditHabitsScreen(onNavigateBack: () -> Unit) {
    var showAddDialog by remember { mutableStateOf(false) }
    var editingHabit by remember { mutableStateOf<DailyHabit?>(null) }
    var showDeleteDialog by remember { mutableStateOf<DailyHabit?>(null) }
    
    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(
                Brush.verticalGradient(
                    colors = listOf(
                        Color(0xFFF9F9FB),
                        Color.White
                    )
                )
            )
    ) {
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(horizontal = 16.dp)
        ) {
            Spacer(modifier = Modifier.statusBarsPadding())
            Spacer(modifier = Modifier.height(20.dp))
            
            // È°∂ÈÉ®Ê†è
            Row(
                modifier = Modifier.fillMaxWidth(),
                verticalAlignment = Alignment.CenterVertically
            ) {
                IconButton(onClick = onNavigateBack) {
                    Icon(
                        imageVector = Icons.Default.ArrowBack,
                        contentDescription = "ËøîÂõû",
                        tint = Color.Black
                    )
                }
                
                Text(
                    text = "ÁºñËæë‰π†ÊÉØ",
                    style = MaterialTheme.typography.headlineLarge.copy(
                        fontWeight = FontWeight.Bold,
                        fontSize = 28.sp,
                        color = Color.Black
                    ),
                    modifier = Modifier.weight(1f)
                )
            }
            
            Spacer(modifier = Modifier.height(24.dp))
            
            // ‰π†ÊÉØÂàóË°®
            Column(
                modifier = Modifier
                    .fillMaxWidth()
                    .weight(1f)
                    .shadow(
                        elevation = 16.dp,
                        shape = RoundedCornerShape(22.dp),
                        ambientColor = Color.Black.copy(alpha = 0.08f),
                        spotColor = Color.Black.copy(alpha = 0.2f)
                    )
                    .clip(RoundedCornerShape(22.dp))
                    .background(Color.White)
                    .padding(16.dp)
            ) {
                if (HabitManager.habits.isEmpty()) {
                    Box(
                        modifier = Modifier.fillMaxSize(),
                        contentAlignment = Alignment.Center
                    ) {
                        Text(
                            text = "ÊöÇÊó†‰π†ÊÉØÔºåÁÇπÂáª‰∏ãÊñπÊåâÈíÆÊ∑ªÂä†",
                            color = Color.Gray,
                            fontFamily = CustomFontFamily
                        )
                    }
                } else {
                    LazyColumn(verticalArrangement = Arrangement.spacedBy(12.dp)) {
                        items(HabitManager.habits) { habit ->
                            EditableHabitItem(
                                habit = habit,
                                onEdit = { editingHabit = habit },
                                onDelete = { showDeleteDialog = habit }
                            )
                        }
                    }
                }
            }
            
            Spacer(modifier = Modifier.navigationBarsPadding())
            Spacer(modifier = Modifier.height(10.dp))
        }
        
        // Ê∑ªÂä†ÊåâÈíÆ
        FloatingActionButton(
            onClick = { showAddDialog = true },
            modifier = Modifier
                .align(Alignment.BottomEnd)
                .padding(16.dp)
                .navigationBarsPadding(),
            containerColor = MaterialTheme.colorScheme.primary
        ) {
            Icon(
                imageVector = Icons.Default.Add,
                contentDescription = "Ê∑ªÂä†‰π†ÊÉØ",
                tint = Color.White
            )
        }
    }
    
    // Ê∑ªÂä†/ÁºñËæëÂØπËØùÊ°Ü
    if (showAddDialog || editingHabit != null) {
        HabitEditDialog(
            habit = editingHabit,
            onDismiss = {
                showAddDialog = false
                editingHabit = null
            },
            onSave = { title, description, icon ->
                if (editingHabit != null) {
                    HabitManager.updateHabit(editingHabit!!.id, title, description, icon)
                } else {
                    HabitManager.addHabit(title, description, icon)
                }
                showAddDialog = false
                editingHabit = null
            }
        )
    }
    
    // Âà†Èô§Á°ÆËÆ§ÂØπËØùÊ°Ü
    showDeleteDialog?.let { habit ->
        AlertDialog(
            onDismissRequest = { showDeleteDialog = null },
            title = { Text("Âà†Èô§‰π†ÊÉØ") },
            text = { Text("Á°ÆÂÆöË¶ÅÂà†Èô§„Äå${habit.title}„ÄçÂêóÔºüÊ≠§Êìç‰ΩúÊó†Ê≥ïÊí§ÈîÄ„ÄÇ") },
            confirmButton = {
                TextButton(
                    onClick = {
                        HabitManager.deleteHabit(habit.id)
                        showDeleteDialog = null
                    }
                ) {
                    Text("Âà†Èô§", color = MaterialTheme.colorScheme.error)
                }
            },
            dismissButton = {
                TextButton(onClick = { showDeleteDialog = null }) {
                    Text("ÂèñÊ∂à")
                }
            }
        )
    }
}

@Composable
fun EditableHabitItem(
    habit: DailyHabit,
    onEdit: () -> Unit,
    onDelete: () -> Unit
) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .clip(RoundedCornerShape(12.dp))
            .background(Color.Black.copy(alpha = 0.04f))
            .padding(16.dp),
        verticalAlignment = Alignment.CenterVertically
    ) {
        Text(
            text = habit.icon,
            fontSize = 24.sp,
            modifier = Modifier.padding(end = 12.dp)
        )
        
        Column(modifier = Modifier.weight(1f)) {
            Text(
                text = habit.title,
                color = Color.Black,
                fontFamily = CustomFontFamily,
                fontWeight = FontWeight.SemiBold,
                fontSize = 16.sp
            )
            Text(
                text = habit.description,
                color = Color.Gray,
                fontFamily = CustomFontFamily,
                fontSize = 12.sp
            )
        }
        
        IconButton(onClick = onEdit) {
            Icon(
                imageVector = Icons.Default.Edit,
                contentDescription = "ÁºñËæë",
                tint = MaterialTheme.colorScheme.primary
            )
        }
        
        IconButton(onClick = onDelete) {
            Icon(
                imageVector = Icons.Default.Delete,
                contentDescription = "Âà†Èô§",
                tint = MaterialTheme.colorScheme.error
            )
        }
    }
}

@Composable
fun HabitEditDialog(
    habit: DailyHabit?,
    onDismiss: () -> Unit,
    onSave: (String, String, String) -> Unit
) {
    var title by remember { mutableStateOf(habit?.title ?: "") }
    var description by remember { mutableStateOf(habit?.description ?: "") }
    var icon by remember { mutableStateOf(habit?.icon ?: "‚úì") }
    
    AlertDialog(
        onDismissRequest = onDismiss,
        title = { Text(if (habit == null) "Ê∑ªÂä†‰π†ÊÉØ" else "ÁºñËæë‰π†ÊÉØ") },
        text = {
            Column(verticalArrangement = Arrangement.spacedBy(12.dp)) {
                OutlinedTextField(
                    value = title,
                    onValueChange = { title = it },
                    label = { Text("‰π†ÊÉØÂêçÁß∞") },
                    modifier = Modifier.fillMaxWidth()
                )
                
                OutlinedTextField(
                    value = description,
                    onValueChange = { description = it },
                    label = { Text("ÊèèËø∞") },
                    modifier = Modifier.fillMaxWidth()
                )
                
                OutlinedTextField(
                    value = icon,
                    onValueChange = { icon = it },
                    label = { Text("ÂõæÊ†á (emoji)") },
                    modifier = Modifier.fillMaxWidth()
                )
            }
        },
        confirmButton = {
            TextButton(
                onClick = {
                    if (title.isNotBlank()) {
                        onSave(title.trim(), description.trim(), icon.trim())
                    }
                },
                enabled = title.isNotBlank()
            ) {
                Text("‰øùÂ≠ò")
            }
        },
        dismissButton = {
            TextButton(onClick = onDismiss) {
                Text("ÂèñÊ∂à")
            }
        }
    )
}

@Composable
fun AboutScreen(onNavigateBack: () -> Unit) {
    val uriHandler = LocalUriHandler.current
    
    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(
                Brush.verticalGradient(
                    colors = listOf(
                        Color(0xFFF9F9FB),
                        Color.White
                    )
                )
            )
    ) {
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(horizontal = 16.dp)
        ) {
            Spacer(modifier = Modifier.statusBarsPadding())
            Spacer(modifier = Modifier.height(20.dp))
            
            // È°∂ÈÉ®Ê†è
            Row(
                modifier = Modifier.fillMaxWidth(),
                verticalAlignment = Alignment.CenterVertically
            ) {
                IconButton(onClick = onNavigateBack) {
                    Icon(
                        imageVector = Icons.Default.ArrowBack,
                        contentDescription = "ËøîÂõû",
                        tint = Color.Black
                    )
                }
                
                Text(
                    text = "ÂÖ≥‰∫é",
                    style = MaterialTheme.typography.headlineLarge.copy(
                        fontWeight = FontWeight.Bold,
                        fontSize = 28.sp,
                        color = Color.Black
                    ),
                    modifier = Modifier.weight(1f)
                )
            }
            
            Spacer(modifier = Modifier.height(24.dp))
            
            // ÂÖ≥‰∫éÂÜÖÂÆπ
            Column(
                modifier = Modifier
                    .fillMaxWidth()
                    .weight(1f)
                    .shadow(
                        elevation = 16.dp,
                        shape = RoundedCornerShape(22.dp),
                        ambientColor = Color.Black.copy(alpha = 0.08f),
                        spotColor = Color.Black.copy(alpha = 0.2f)
                    )
                    .clip(RoundedCornerShape(22.dp))
                    .background(Color.White)
                    .padding(24.dp),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                // Â∫îÁî®ÂõæÊ†á
                Text(
                    text = "üìä",
                    fontSize = 64.sp,
                    modifier = Modifier.padding(bottom = 16.dp)
                )
                
                Text(
                    text = "‰π†ÊÉØÊâìÂç°",
                    style = MaterialTheme.typography.headlineMedium.copy(
                        fontWeight = FontWeight.Bold,
                        color = Color.Black
                    ),
                    modifier = Modifier.padding(bottom = 8.dp)
                )
                
                Text(
                    text = "ÁâàÊú¨ 1.0.0",
                    color = Color.Gray,
                    fontFamily = CustomFontFamily,
                    modifier = Modifier.padding(bottom = 24.dp)
                )
                
                // Â∫îÁî®‰ªãÁªç
                Column(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalAlignment = Alignment.Start
                ) {
                    Text(
                        text = "üìù Â∫îÁî®‰ªãÁªç",
                        style = MaterialTheme.typography.titleMedium.copy(
                            fontWeight = FontWeight.SemiBold,
                            color = Color.Black
                        ),
                        modifier = Modifier.padding(bottom = 8.dp)
                    )
                    
                    Text(
                        text = "ËøôÊòØ‰∏Ä‰∏™ÁÆÄÊ¥Å‰ºòÈõÖÁöÑ‰π†ÊÉØÂÖªÊàêÂ∫îÁî®ÔºåÂ∏ÆÂä©ÊÇ®Âª∫Á´ãÂíåÁª¥ÊåÅËâØÂ•ΩÁöÑÊó•Â∏∏‰π†ÊÉØ„ÄÇÈÄöËøáÊó•ÂéÜËßÜÂõæÂíåÊâìÂç°ÂäüËÉΩÔºåËÆ©‰π†ÊÉØÂÖªÊàêÂèòÂæóÊõ¥Âä†Áõ¥ËßÇÂíåÊúâË∂£„ÄÇ",
                        color = Color.Black.copy(alpha = 0.8f),
                        fontFamily = CustomFontFamily,
                        lineHeight = 20.sp,
                        modifier = Modifier.padding(bottom = 24.dp)
                    )
                    
                    Text(
                        text = "‚ú® ‰∏ªË¶ÅÂäüËÉΩ",
                        style = MaterialTheme.typography.titleMedium.copy(
                            fontWeight = FontWeight.SemiBold,
                            color = Color.Black
                        ),
                        modifier = Modifier.padding(bottom = 8.dp)
                    )
                    
                    val features = listOf(
                        "üìÖ Áõ¥ËßÇÁöÑÊó•ÂéÜËßÜÂõæ",
                        "‚úÖ ÁÆÄÂçïÁöÑÊâìÂç°Êìç‰Ωú",
                        "üìä ÂÆåÊàêËøõÂ∫¶ÁªüËÆ°",
                        "üéØ Ëá™ÂÆö‰πâ‰π†ÊÉØÁÆ°ÁêÜ",
                        "üíæ Êú¨Âú∞Êï∞ÊçÆÂ≠òÂÇ®"
                    )
                    
                    features.forEach { feature ->
                        Text(
                            text = feature,
                            color = Color.Black.copy(alpha = 0.8f),
                            fontFamily = CustomFontFamily,
                            modifier = Modifier.padding(bottom = 4.dp)
                        )
                    }
                }
                
                Spacer(modifier = Modifier.weight(1f))
                
                // GitHubÈìæÊé•
                Button(
                    onClick = {
                        uriHandler.openUri("https://github.com/Chevey339/check-in-record")
                    },
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(vertical = 8.dp),
                    shape = RoundedCornerShape(12.dp)
                ) {
                    Icon(
                        painter = painterResource(id = R.drawable.ic_github),
                        contentDescription = null,
                        modifier = Modifier.padding(end = 8.dp)
                    )
                    Text("GitHub ÂºÄÊ∫êÂú∞ÂùÄ")
                }
                
                Text(
                    text = "ÂºÄÂèëËÄÖÔºö17",
                    color = Color.Gray,
                    fontFamily = CustomFontFamily,
                    fontSize = 12.sp,
                    modifier = Modifier.padding(top = 16.dp)
                )
            }
            
            Spacer(modifier = Modifier.navigationBarsPadding())
            Spacer(modifier = Modifier.height(10.dp))
        }
    }
}

@RequiresApi(Build.VERSION_CODES.O)
@OptIn(ExperimentalFoundationApi::class)
@Composable
fun PhysicsBasedCalendar(
    selectedDate: LocalDate,
    onDateSelected: (LocalDate) -> Unit
) {
    val currentMonth = YearMonth.now()
    val initialPage = Int.MAX_VALUE / 2
    val pagerState = rememberPagerState(initialPage = initialPage, pageCount = { Int.MAX_VALUE })

    val displayedMonth = currentMonth.plusMonths((pagerState.currentPage - initialPage).toLong())

    Column(horizontalAlignment = Alignment.CenterHorizontally) {
        val monthTitleFormatter = DateTimeFormatter.ofPattern("MMMM yyyy", Locale.getDefault())
        Text(
            text = displayedMonth.format(monthTitleFormatter),
            fontSize = 22.sp,
            fontFamily = CustomFontFamily,
            fontWeight = FontWeight.Bold,
            color = Color.Black.copy(alpha = 0.9f), // [ÁôΩÂ§©Ê®°ÂºèÈÄÇÂ∫î] ÁôΩËâ≤ -> ÈªëËâ≤
            modifier = Modifier.padding(vertical = 16.dp)
        )

        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(bottom = 8.dp),
            horizontalArrangement = Arrangement.SpaceAround
        ) {
            // DayOfWeek.values() Âú®Êüê‰∫õÁéØÂ¢É‰∏≠È°∫Â∫è‰∏çÂõ∫ÂÆöÔºåËøôÈáåÊòéÁ°ÆÊåáÂÆöÈ°∫Â∫è
            val daysOfWeek = listOf(DayOfWeek.SUNDAY, DayOfWeek.MONDAY, DayOfWeek.TUESDAY, DayOfWeek.WEDNESDAY, DayOfWeek.THURSDAY, DayOfWeek.FRIDAY, DayOfWeek.SATURDAY)
            for (day in daysOfWeek) {
                Text(
                    text = day.getDisplayName(TextStyle.SHORT, Locale.getDefault()),
                    color = Color.Gray, // [ÁôΩÂ§©Ê®°ÂºèÈÄÇÂ∫î] ÁôΩËâ≤ -> ÁÅ∞Ëâ≤ÔºåÁî®‰∫éÊ¨°Ë¶Å‰ø°ÊÅØ
                    fontSize = 14.sp,
                    fontFamily = CustomFontFamily,
                    fontWeight = FontWeight.SemiBold,
                    textAlign = TextAlign.Center,
                    modifier = Modifier.weight(1f)
                )
            }
        }

        HorizontalPager(
            state = pagerState,
            modifier = Modifier.height(300.dp),
        ) { page ->
            val month = currentMonth.plusMonths((page - initialPage).toLong())
            MonthView(
                month = month,
                selectedDate = selectedDate,
                onDateSelected = onDateSelected
            )
        }
    }
}


@RequiresApi(Build.VERSION_CODES.O)
@Composable
fun DayCell(
    date: LocalDate,
    isSelected: Boolean,
    isCurrentMonth: Boolean,
    onDateSelected: (LocalDate) -> Unit
) {
    val isToday = date == LocalDate.now()
    val isChecked = CheckInManager.isDateChecked(date) // Ê£ÄÊü•ÊòØÂê¶Â∑≤ÊâìÂç°
    val cellColor = if (isSelected) MaterialTheme.colorScheme.primary else Color.Transparent // [È£éÊ†º‰ºòÂåñ] ÈÄâ‰∏≠Êó∂‰ΩøÁî®‰∏ªÈ¢òËâ≤ÔºåÊõ¥ÈÜíÁõÆ
    val textColor = when {
        isSelected -> Color.White // [ÁôΩÂ§©Ê®°ÂºèÈÄÇÂ∫î] Âú®‰∏ªÈ¢òËâ≤ËÉåÊôØ‰∏äÔºåÁî®ÁôΩËâ≤ÊñáÂ≠ó
        isToday -> MaterialTheme.colorScheme.primary // [È£éÊ†º‰ºòÂåñ] ‰ªäÂ§©Êó•Êúü‰πü‰ΩøÁî®‰∏ªÈ¢òËâ≤Âº∫Ë∞É
        else -> Color.Black // [ÂÖ≥ÈîÆ‰øÆÂ§ç] ÈªòËÆ§ÊñáÂ≠óÈ¢úËâ≤Ôºå‰ªéÁôΩËâ≤Êîπ‰∏∫ÈªëËâ≤
    }

    Box(
        modifier = Modifier
            .aspectRatio(1f)
            .padding(2.dp)
            .clip(CircleShape)
            .background(cellColor)
            .clickable { onDateSelected(date) },
        contentAlignment = Alignment.Center
    ) {
        Column(
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.Center
        ) {
            Text(
                text = date.dayOfMonth.toString(),
                color = textColor.copy(alpha = if (isCurrentMonth) 1.0f else 0.4f), // ÈùûÊú¨ÊúàÊó•ÊúüÂèòÊ∑°
                fontFamily = CustomFontFamily,
                fontWeight = if (isSelected || isToday) FontWeight.Bold else FontWeight.Normal,
                fontSize = 16.sp
            )
            
            // ÊâìÂç°Ê†áËÆ∞
            if (isChecked) {
                Spacer(modifier = Modifier.height(2.dp))
                Box(
                    modifier = Modifier
                        .size(4.dp)
                        .clip(CircleShape)
                        .background(
                            if (isSelected) Color.White
                            else MaterialTheme.colorScheme.primary
                        )
                )
            }
        }
    }
}

@SuppressLint("UnrememberedMutableState")
@RequiresApi(Build.VERSION_CODES.O)
@Composable
fun HabitManagerComponent(selectedDate: LocalDate) {
    // Ê∑ªÂä†‰∏Ä‰∏™Áä∂ÊÄÅÊù•Ëß¶ÂèëÈáçÁªÑ
    var refreshTrigger by remember { mutableStateOf(0) }
    
    Column(
        modifier = Modifier.fillMaxWidth()
    ) {
        // ÊòæÁ§∫ÂΩìÂâçÊó•Êúü
        val dateFormatter = DateTimeFormatter.ofPattern("yyyyÂπ¥MMÊúàddÊó•", Locale.CHINESE)
        Text(
            text = selectedDate.format(dateFormatter),
            fontSize = 14.sp,
            fontFamily = CustomFontFamily,
            color = Color.Gray,
            modifier = Modifier.padding(bottom = 12.dp)
        )

        LazyColumn(verticalArrangement = Arrangement.spacedBy(10.dp)) {
            items(HabitManager.habits) { habit ->
                HabitItem(
                    habit = habit,
                    date = selectedDate,
                    isChecked = CheckInManager.isHabitChecked(selectedDate, habit.id),
                    onCheckChanged = {
                        CheckInManager.toggleHabitCheck(selectedDate, habit.id)
                        refreshTrigger++ // Ëß¶ÂèëÈáçÁªÑ
                    }
                )
            }
        }
        
        // ÊòæÁ§∫ÂÆåÊàêËøõÂ∫¶
        val completedCount = CheckInManager.getCompletedCount(selectedDate)
        val totalCount = HabitManager.habits.size
        
        Spacer(modifier = Modifier.height(16.dp))
        
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .clip(RoundedCornerShape(8.dp))
                .background(Color.Black.copy(alpha = 0.04f))
                .padding(12.dp),
            contentAlignment = Alignment.Center
        ) {
            Text(
                text = "‰ªäÊó•ÂÆåÊàêÔºö$completedCount / $totalCount",
                fontSize = 14.sp,
                fontFamily = CustomFontFamily,
                color = if (completedCount == totalCount) MaterialTheme.colorScheme.primary else Color.Gray,
                fontWeight = if (completedCount == totalCount) FontWeight.Bold else FontWeight.Normal
            )
        }
    }
}

@Composable
fun HabitItem(
    habit: DailyHabit,
    date: LocalDate,
    isChecked: Boolean,
    onCheckChanged: () -> Unit
) {
    val textAlpha by animateFloatAsState(targetValue = if (isChecked) 0.6f else 1f)
    val textColor = Color.Black
    val secondaryTextColor = Color.Gray

    Row(
        modifier = Modifier
            .fillMaxWidth()
            .clip(RoundedCornerShape(12.dp))
            .background(Color.Black.copy(alpha = 0.04f))
            .clickable { onCheckChanged() }
            .padding(horizontal = 16.dp, vertical = 14.dp),
        verticalAlignment = Alignment.CenterVertically
    ) {
        // ‰π†ÊÉØÂõæÊ†á
        Text(
            text = habit.icon,
            fontSize = 24.sp,
            modifier = Modifier.padding(end = 12.dp)
        )
        
        Column(modifier = Modifier.weight(1f)) {
            Text(
                text = habit.title,
                color = textColor.copy(alpha = textAlpha),
                fontFamily = CustomFontFamily,
                fontWeight = FontWeight.SemiBold,
                fontSize = 16.sp,
                textDecoration = if (isChecked) TextDecoration.LineThrough else TextDecoration.None
            )
            Text(
                text = habit.description,
                color = secondaryTextColor.copy(alpha = textAlpha),
                fontFamily = CustomFontFamily,
                fontSize = 12.sp
            )
        }
        
        Spacer(modifier = Modifier.width(16.dp))
        
        // ÊâìÂç°ÊåâÈíÆ
        Box(
            modifier = Modifier
                .size(36.dp)
                .clip(CircleShape)
                .background(
                    if (isChecked) MaterialTheme.colorScheme.primary
                    else Color.Black.copy(alpha = 0.08f)
                ),
            contentAlignment = Alignment.Center
        ) {
            if (isChecked) {
                Icon(
                    painter = painterResource(id = R.drawable.ic_circle_solid),
                    contentDescription = "Â∑≤ÂÆåÊàê",
                    tint = Color.White,
                    modifier = Modifier.size(20.dp)
                )
            }
        }
    }
}

@RequiresApi(Build.VERSION_CODES.O)
@Composable
fun MonthView(
    month: YearMonth,
    selectedDate: LocalDate,
    onDateSelected: (LocalDate) -> Unit
) {
    val daysInMonth = month.lengthOfMonth()
    val firstDayOfMonth = month.atDay(1).dayOfWeek
    // ËÆ°ÁÆóÁΩëÊ†ºÂºÄÂßãÂâçÁöÑÁ©∫ÁôΩÂ§©Êï∞ (ÂÅáËÆæÂë®Êó•ÊòØÁ¨¨‰∏ÄÂ§©)
    val paddingDays = (firstDayOfMonth.value % 7)

    val calendarDays = mutableListOf<LocalDate?>()
    // Ê∑ªÂä†‰∏ä‰∏™ÊúàÁöÑÂ∞æÂ∑¥
    for (i in 0 until paddingDays) {
        calendarDays.add(null) // ‰ΩøÁî®null‰Ωú‰∏∫Âç†‰ΩçÁ¨¶
    }
    // Ê∑ªÂä†Êú¨ÊúàÁöÑÊâÄÊúâÂ§©
    for (i in 1..daysInMonth) {
        calendarDays.add(month.atDay(i))
    }

    // Êó•ÊúüÁΩëÊ†º
    LazyVerticalGrid(
        columns = GridCells.Fixed(7),
        userScrollEnabled = false // Á¶ÅÊ≠¢ÁΩëÊ†ºÂÜÖÈÉ®ÊªöÂä®ÔºåÁî±PagerÊéßÂà∂
    ) {
        items(calendarDays) { date ->
            if (date != null) {
                DayCell(
                    date = date,
                    isSelected = date == selectedDate,
                    isCurrentMonth = true, // Âú®Ëøô‰∏™ËßÜÂõæÈáåÈÉΩÊòØÂΩìÂâçÊúà
                    onDateSelected = onDateSelected
                )
            } else {
                // Á©∫ÁôΩÂç†‰ΩçÁ¨¶
                Box(modifier = Modifier.aspectRatio(1f))
            }
        }
    }
}

@RequiresApi(Build.VERSION_CODES.O)
@Preview(showBackground = true)
@Composable
fun GreetingPreview() {
    UldemoTheme {
        AppNavigation()
    }
}