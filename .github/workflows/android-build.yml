# 工作流的名称
name: Android CI Build

# 触发工作流的事件
on:
  push:
    branches: [ "main" ] # 当有代码推送到 main 分支时触发
  pull_request:
    branches: [ "main" ] # 当有 pull request 合并到 main 分支时触发

# 定义工作任务
jobs:
  build:
    # 指定运行环境
    runs-on: ubuntu-latest

    # 定义步骤
    steps:
      # 1. 检出代码：将仓库的代码下载到虚拟机中
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. 设置 Java 环境：安卓编译需要 JDK
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      # 3. 设置 Gradle 缓存，加快后续编译速度
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      # 4. 授予 gradlew 执行权限
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # 5. 解码并创建签名文件
      #    这一步会从 GitHub Secrets 中读取 Base64 字符串，
      #    并将它解码还原成一个 .jks 文件，存放在项目根目录下。
      - name: Decode Keystore
        run: |
          echo "${{ secrets.SIGNING_KEY_STORE_BASE64 }}" | base64 --decode > ${{ github.workspace }}/release.jks
        # 如果上面的命令在某些环境下失败，可以尝试下面这个更健壮的版本：
        # env:
        #   SIGNING_KEY_STORE_BASE64: ${{ secrets.SIGNING_KEY_STORE_BASE64 }}
        # run: |
        #   echo $SIGNING_KEY_STORE_BASE64 | base64 --decode > ${{ github.workspace }}/release.jks

      # 6. 编译 Release 版本的 APK
      #    我们通过 -P 参数将 Secrets 作为属性传递给 Gradle。
      #    这些属性需要在你的 build.gradle 文件中进行配置（见下方说明）。
      - name: Build Release APK
        run: ./gradlew assembleRelease
        env:
          SIGNING_KEY_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
          SIGNING_STORE_PASSWORD: ${{ secrets.SIGNING_STORE_PASSWORD }}

      # 7. 上传 Release APK 作为产物
      #    注意路径已经从 debug 变为了 release。
      - name: Upload Release APK
        uses: actions/upload-artifact@v4
        with:
          name: app-release.apk
          path: app/build/outputs/apk/release/app-release.apk
